name: Build and Deploy Node.js API

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Build application
      run: npm run build --if-present

    - name: Verify production readiness
      run: |
        # Check if main application file exists (only server.js)
        if [ ! -f "server.js" ]; then
          echo "❌ No main application file found (server.js)"
          exit 1
        fi
        
        # Test production install
        npm ci --production
        echo "✅ Production dependencies installed successfully"

  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18.x"

    - name: Install production dependencies
      run: npm ci --production
    
    - name: Setup SSH connection
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        # Create SSH directory and set permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Save private key
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add VM host to known hosts
        ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        # Test SSH connection
        echo "Testing SSH connection to $VM_HOST..."
        if ssh -i ~/.ssh/id_rsa -o BatchMode=yes -o ConnectTimeout=5 "$VM_USER@$VM_HOST" "echo 'SSH connection successful!'"; then
          echo "✅ SSH connection test passed"
        else
          echo "❌ SSH connection test failed"
          exit 1
        fi

    - name: Deploy to VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        # Create temporary directory on VM
        ssh -i ~/.ssh/id_rsa "$VM_USER@$VM_HOST" "mkdir -p /tmp/deploy-backend-api"
        
        # Copy files to VM (exclude unnecessary files)
        echo "Uploading files to VM..."
        rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
          --exclude=.git \
          --exclude=.github \
          --exclude=node_modules \
          --exclude=*.log \
          ./ "$VM_USER@$VM_HOST:/tmp/deploy-backend-api/"
        
        echo "✅ Files uploaded successfully"

    - name: Setup application on VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        ssh -i ~/.ssh/id_rsa "$VM_USER@$VM_HOST" 'bash -s' << 'EOF'
        set -e  # Exit on error
        
        # Create application directory
        APP_DIR="/opt/backend-api"
        sudo mkdir -p "$APP_DIR"
        sudo chown -R $USER:$USER "$APP_DIR"
        
        # Copy files from temp to app directory
        cp -r /tmp/deploy-backend-api/* "$APP_DIR/"
        cd "$APP_DIR"
        
        # Install production dependencies
        npm install --production
        
        # Setup application to run on port 80
        echo "Setting up application..."
        
        # Allow Node.js to bind to port 80 without root
        sudo setcap 'cap_net_bind_service=+ep' $(which node) 2>/dev/null || true
        
        # Create or update systemd service
        sudo tee /etc/systemd/system/backend-api.service > /dev/null << SERVICE
        [Unit]
        Description=Backend API Service
        After=network.target
        
        [Service]
        Type=simple
        User=$USER
        WorkingDirectory=$APP_DIR
        Environment=NODE_ENV=production
        ExecStart=/usr/bin/node $APP_DIR/app.js
        Restart=always
        RestartSec=3
        
        [Install]
        WantedBy=multi-user.target
        SERVICE
        
        # Reload systemd and enable service
        sudo systemctl daemon-reload
        sudo systemctl enable backend-api.service
        sudo systemctl restart backend-api.service
        
        # Ensure firewall allows port 80
        if command -v ufw >/dev/null 2>&1; then
          sudo ufw allow 80/tcp 2>/dev/null || true
        fi
        
        echo "✅ Application setup completed"
        EOF

    - name: Verify deployment
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
      run: |
        echo "Waiting for application to start..."
        sleep 5
        
        # Test the API endpoint
        if curl -f -s -S --retry 3 --retry-delay 2 "http://$VM_HOST/sayHello"; then
          echo "✅ Deployment verified successfully!"
        else
          echo "❌ Deployment verification failed"
          echo "Checking service status..."
          ssh -i ~/.ssh/id_rsa "$VM_USER@$VM_HOST" "sudo systemctl status backend-api.service --no-pager"
          exit 1
        fi

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Deployment failed for commit ${{ github.sha }}',
            body: 'The deployment to the VM failed. Please check the GitHub Actions logs for details.'
          })