name: Build and Deploy Node.js API

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Build application
      run: npm run build --if-present

    - name: Verify production readiness
      run: |
        # Check if main application file exists
        if [ ! -f "server.js" ]; then
          echo "❌ No main application file found (server.js)"
          exit 1
        fi
        
        # Test production install
        npm ci --production
        echo "✅ Production dependencies installed successfully"

  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18.x"

    - name: Install production dependencies
      run: npm ci --production
    
    - name: Setup SSH connection
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$SSH_PRIVATE_KEY" | fold -w 64 > ~/.ssh/id_rsa.tmp
        mv ~/.ssh/id_rsa.tmp ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
        echo "Testing SSH connection..."
        ssh -i ~/.ssh/id_rsa \
            -o BatchMode=yes \
            -o ConnectTimeout=10 \
            -o StrictHostKeyChecking=no \
            "$VM_USER@$VM_HOST" "echo '✅ SSH connection successful!'"
            
    - name: Setup application on VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        ssh -i ~/.ssh/id_rsa "$VM_USER@$VM_HOST" 'bash -s' << 'EOF'
        set -e

        APP_DIR="/opt/backend-api"
        sudo mkdir -p "$APP_DIR"
        sudo chown -R $USER:$USER "$APP_DIR"

        cp -r /tmp/deploy-backend-api/* "$APP_DIR/"
        cd "$APP_DIR"

        npm install --production

        # Install pm2 if missing
        if ! command -v pm2 &> /dev/null; then
          echo "⚡ Installing PM2 globally..."
          sudo npm install -g pm2
          pm2 update
          # Use current user instead of hardcoding $USER
          pm2 startup systemd -u $(whoami) --hp $HOME || true
        fi
        
        # Start or reload app with pm2 (zero-downtime)
        if pm2 describe backend-api > /dev/null 2>&1; then
          pm2 reload backend-api --update-env || true
        else
          pm2 start server.js --name backend-api --update-env || true
        fi
        
        pm2 save || true
        EOF

    - name: Verify deployment
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        echo "Waiting for application to start..."
        sleep 15

        if curl -f -s -S --retry 3 --retry-delay 2 "http://$VM_HOST:80/sayHello"; then
          echo "✅ Deployment verified successfully!"
        else
          echo "❌ Deployment verification failed"
          ssh -i ~/.ssh/id_rsa "$VM_USER@$VM_HOST" "pm2 logs backend-api --lines 20"
          exit 1
        fi

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Deployment failed for commit ${{ github.sha }}',
            body: 'The deployment to the VM failed. Please check the GitHub Actions logs for details.'
          })
